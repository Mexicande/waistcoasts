package com.six.xinyidai.util.greenDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.six.xinyidai.model.Category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY".
*/
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CategoryId = new Property(0, Long.class, "categoryId", true, "_id");
        public final static Property CategoryName = new Property(1, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property CategoryIconRId = new Property(2, int.class, "categoryIconRId", false, "CATEGORY_ICON_RID");
        public final static Property CategoryColor = new Property(3, int.class, "categoryColor", false, "CATEGORY_COLOR");
        public final static Property IsActivate = new Property(4, boolean.class, "isActivate", false, "IS_ACTIVATE");
        public final static Property SerialNumber = new Property(5, int.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property Remark = new Property(6, String.class, "remark", false, "REMARK");
    }


    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: categoryId
                "\"CATEGORY_NAME\" TEXT NOT NULL ," + // 1: categoryName
                "\"CATEGORY_ICON_RID\" INTEGER NOT NULL ," + // 2: categoryIconRId
                "\"CATEGORY_COLOR\" INTEGER NOT NULL ," + // 3: categoryColor
                "\"IS_ACTIVATE\" INTEGER NOT NULL ," + // 4: isActivate
                "\"SERIAL_NUMBER\" INTEGER NOT NULL ," + // 5: serialNumber
                "\"REMARK\" TEXT);"); // 6: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(1, categoryId);
        }
        stmt.bindString(2, entity.getCategoryName());
        stmt.bindLong(3, entity.getCategoryIconRId());
        stmt.bindLong(4, entity.getCategoryColor());
        stmt.bindLong(5, entity.getIsActivate() ? 1L: 0L);
        stmt.bindLong(6, entity.getSerialNumber());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindLong(1, categoryId);
        }
        stmt.bindString(2, entity.getCategoryName());
        stmt.bindLong(3, entity.getCategoryIconRId());
        stmt.bindLong(4, entity.getCategoryColor());
        stmt.bindLong(5, entity.getIsActivate() ? 1L: 0L);
        stmt.bindLong(6, entity.getSerialNumber());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(7, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // categoryId
            cursor.getString(offset + 1), // categoryName
            cursor.getInt(offset + 2), // categoryIconRId
            cursor.getInt(offset + 3), // categoryColor
            cursor.getShort(offset + 4) != 0, // isActivate
            cursor.getInt(offset + 5), // serialNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setCategoryId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoryName(cursor.getString(offset + 1));
        entity.setCategoryIconRId(cursor.getInt(offset + 2));
        entity.setCategoryColor(cursor.getInt(offset + 3));
        entity.setIsActivate(cursor.getShort(offset + 4) != 0);
        entity.setSerialNumber(cursor.getInt(offset + 5));
        entity.setRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setCategoryId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getCategoryId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Category entity) {
        return entity.getCategoryId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
